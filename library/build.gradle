apply plugin: 'com.android.library'

android {
  compileSdkVersion rootProject.ext.compileSdkVersion

  defaultConfig {
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion

    versionCode Integer.parseInt(project.VERSION_CODE)
    versionName project.VERSION_NAME

    vectorDrawables.useSupportLibrary = true
  }

  lintOptions {
    abortOnError false
  }

  compileOptions {
    // Flag to enable support for the new language APIs (java.time)
    coreLibraryDesugaringEnabled true

    sourceCompatibility JavaVersion.VERSION_11
    targetCompatibility JavaVersion.VERSION_11
  }
}

group = "com.github.goemic"
version = android.defaultConfig.versionName
archivesBaseName = 'material-calendarview'

dependencies {

  // support for the new language APIs (e.g. java.time)
  coreLibraryDesugaring  rootProject.ext.jdkDesugaring
  implementation rootProject.ext.supportAppCompat
  implementation rootProject.ext.supportAnnotations

  rootProject.ext.testDep.each { testImplementation it }
  rootProject.ext.androidTestDep.each { androidTestImplementation it }
}

tasks.withType(Javadoc) {
  options.addStringOption('Xdoclint:none', '-quiet')
  options.addStringOption('encoding', 'UTF-8')
  options.addStringOption('charSet', 'UTF-8')
}

android.libraryVariants.all { variant ->
  task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
    title "Material CalendarView ${version}"
    description "Generates Javadoc for $variant.name."
    source = variant.javaCompiler.source
    doFirst {
      classpath = files(variant.javaCompiler.classpath.files, project.android.getBootClasspath())
    }
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    options {
      links "http://docs.oracle.com/javase/7/docs/api/"
      linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
    }
  }
}


//
// jitpack related maven deployment config
//

// include sources, thereby we are able to view full sources of classes and not only method names and parameters
task androidSourcesJar(type: Jar) {
  archiveClassifier.set("sources")
  from android.sourceSets.main.java.srcDirs
}

publishing {
  publications {

    aar(MavenPublication) {
      setGroupId(group)
      setArtifactId(archivesBaseName)
      version version

      // Tell maven to prepare the generated "*.aar" file for publishing
      artifact("$buildDir/outputs/aar/${archivesBaseName}-release.aar")
      artifact androidSourcesJar

      //The publication doesn"t know about our dependencies, so we have to manually add them to the pom
      pom.withXml {
        def dependenciesNode = asNode().appendNode("dependencies")

        //Iterate over the api dependencies (we don"t want the test or implementation ones), adding a <dependency> node for each
        configurations.api.allDependencies.each {
          def dependencyNode = dependenciesNode.appendNode("dependency")
          dependencyNode.appendNode("groupId", it.group)
          dependencyNode.appendNode("artifactId", it.name)
          dependencyNode.appendNode("version", it.version)
        }
      }
    }
  }
}